/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "ERC20Custody",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Custody__factory>;
    getContractFactory(
      name: "ConnectorErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConnectorErrors__factory>;
    getContractFactory(
      name: "ZetaErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaErrors__factory>;
    getContractFactory(
      name: "ZetaCommonErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaCommonErrors__factory>;
    getContractFactory(
      name: "ZetaConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaConnector__factory>;
    getContractFactory(
      name: "ZetaReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaReceiver__factory>;
    getContractFactory(
      name: "ZetaTokenConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaTokenConsumer__factory>;
    getContractFactory(
      name: "ZetaNonEthInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaNonEthInterface__factory>;
    getContractFactory(
      name: "ZetaEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaEth__factory>;
    getContractFactory(
      name: "ZetaNonEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaNonEth__factory>;
    getContractFactory(
      name: "ZetaConnectorBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaConnectorBase__factory>;
    getContractFactory(
      name: "ZetaConnectorEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaConnectorEth__factory>;
    getContractFactory(
      name: "WZETA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WZETA__factory>;
    getContractFactory(
      name: "ZetaConnectorZEVM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaConnectorZEVM__factory>;
    getContractFactory(
      name: "ISystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISystem__factory>;
    getContractFactory(
      name: "IZRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZRC20__factory>;
    getContractFactory(
      name: "IZRC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZRC20Metadata__factory>;
    getContractFactory(
      name: "ZContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZContract__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IZRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZRC20__factory>;
    getContractFactory(
      name: "ZContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZContract__factory>;
    getContractFactory(
      name: "SystemContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SystemContract__factory>;
    getContractFactory(
      name: "SystemContractErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SystemContractErrors__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "ZRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZRC20__factory>;
    getContractFactory(
      name: "ZRC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZRC20Errors__factory>;

    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "ERC20Custody",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Custody>;
    getContractAt(
      name: "ConnectorErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConnectorErrors>;
    getContractAt(
      name: "ZetaErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaErrors>;
    getContractAt(
      name: "ZetaCommonErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaCommonErrors>;
    getContractAt(
      name: "ZetaConnector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaConnector>;
    getContractAt(
      name: "ZetaReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaReceiver>;
    getContractAt(
      name: "ZetaTokenConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaTokenConsumer>;
    getContractAt(
      name: "ZetaNonEthInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaNonEthInterface>;
    getContractAt(
      name: "ZetaEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaEth>;
    getContractAt(
      name: "ZetaNonEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaNonEth>;
    getContractAt(
      name: "ZetaConnectorBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaConnectorBase>;
    getContractAt(
      name: "ZetaConnectorEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaConnectorEth>;
    getContractAt(
      name: "WZETA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WZETA>;
    getContractAt(
      name: "ZetaConnectorZEVM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaConnectorZEVM>;
    getContractAt(
      name: "ISystem",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISystem>;
    getContractAt(
      name: "IZRC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZRC20>;
    getContractAt(
      name: "IZRC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZRC20Metadata>;
    getContractAt(
      name: "ZContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZContract>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IZRC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZRC20>;
    getContractAt(
      name: "ZContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZContract>;
    getContractAt(
      name: "SystemContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SystemContract>;
    getContractAt(
      name: "SystemContractErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SystemContractErrors>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "ZRC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZRC20>;
    getContractAt(
      name: "ZRC20Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZRC20Errors>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
